const config = require('../utils/config');

/**
 * Global xÉ™ta idarÉ™ edici middleware
 * ExpressEJS qaydalarÄ±na uyÄŸun olaraq bÃ¼tÃ¼n xÉ™talarÄ± idarÉ™ edir
 */
const errorHandler = (err, req, res, next) => {
  // XÉ™ta mÉ™lumatlarÄ±nÄ± log et
  const Error_Log = {
    timestamp: new Date().toISOString(),
    error: err.message,
    stack: err.stack,
    url: req.originalUrl,
    method: req.method,
    ip: req.ip,
    userAgent: req.get('User-Agent'),
    user: req.session?.user?.username || 'anonymous'
  };

  // Production mÃ¼hitindÉ™ sadÉ™cÉ™ vacib mÉ™lumatlarÄ± log et
  if (config.isDevelopment()) {
    // Development mÃ¼hitindÉ™ É™traflÄ± mÉ™lumat
    console.error('ğŸš¨ Express xÉ™ta idarÉ™ edici:', Error_Log);
  } else {
    // Production mÃ¼hitindÉ™ minimal logging
    console.error('Server xÉ™tasÄ±:', {
      message: err.message,
      status: err.status || 500,
      url: req.originalUrl,
      method: req.method,
      timestamp: Error_Log.timestamp,
      ip: req.ip
    });
  }

  // HTTP status kodunu tÉ™yin et
  const Status_Code = err.statusCode || err.status || 500;
  
  // XÉ™ta mesajÄ±nÄ± tÉ™yin et - istifadÉ™Ã§i dostu
  let Error_Message;
  let Error_Key;

  // Status koduna gÃ¶rÉ™ xÉ™ta mesajÄ±nÄ± seÃ§
  switch (Status_Code) {
    case 400:
      Error_Key = 'errors.validation_error';
      break;
    case 401:
      Error_Key = 'errors.unauthorized';
      break;
    case 403:
      Error_Key = 'errors.forbidden';
      break;
    case 404:
      Error_Key = 'errors.not_found';
      break;
    case 429:
      Error_Key = 'errors.too_many_requests';
      break;
    case 500:
    default:
      Error_Key = 'errors.server_error';
  }

  // i18n funksiyasÄ± mÃ¶vcuddursa tÉ™rcÃ¼mÉ™ et
  if (req.t) {
    Error_Message = req.t(Error_Key);
  } else {
    // Fallback mesajlar (i18n yÃ¼klÉ™nmÉ™miÅŸsÉ™)
    const Fallback_Messages = {
      400: 'DoÄŸrulama xÉ™tasÄ±',
      401: 'Ä°cazÉ™siz giriÅŸ',
      403: 'QadaÄŸan edilmiÅŸ',
      404: 'SÉ™hifÉ™ tapÄ±lmadÄ±',
      429: 'Ã‡ox sayda sorÄŸu',
      500: 'Server xÉ™tasÄ±'
    };
    Error_Message = Fallback_Messages[Status_Code] || 'NamÉ™lum xÉ™ta';
  }

  // JSON API sorÄŸularÄ±nÄ± yoxla
  if (req.xhr || req.get('Content-Type') === 'application/json' || req.path.startsWith('/api/')) {
    // JSON cavab qaytÄ±r
    return res.status(Status_Code).json({
      success: false,
      error: {
        message: Error_Message,
        code: Status_Code,
        timestamp: Error_Log.timestamp
      },
      // Development mÃ¼hitindÉ™ É™lavÉ™ mÉ™lumat
      ...(config.isDevelopment() && {
        debug: {
          stack: err.stack,
          originalError: err.message
        }
      })
    });
  }

  // HTML sÉ™hifÉ™ render et
  res.status(Status_Code).render('error', {
    title: Error_Message,
    error: {
      status: Status_Code,
      message: Error_Message,
      // Development mÃ¼hitindÉ™ stack trace gÃ¶stÉ™r
      stack: config.isDevelopment() ? err.stack : null
    }
  });
};

/**
 * Async funksiyalarÄ± wrap edÉ™n helper
 * Promise rejection-larÄ± avtomatik olaraq error handler-É™ yÃ¶nlÉ™ndirir
 */
const asyncHandler = (fn) => {
  return (req, res, next) => {
    Promise.resolve(fn(req, res, next)).catch(next);
  };
};

/**
 * 404 Not Found handler
 * Middleware chain-dÉ™ É™n sonda Ã§aÄŸÄ±rÄ±lÄ±r
 */
const notFoundHandler = (req, res, next) => {
  const error = new Error(`SÉ™hifÉ™ tapÄ±lmadÄ±: ${req.originalUrl}`);
  error.status = 404;
  next(error);
};

module.exports = {
  errorHandler,
  asyncHandler,
  notFoundHandler
};
