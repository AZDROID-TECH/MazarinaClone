const i18next = require('i18next');
const Backend = require('i18next-fs-backend');
const middleware = require('i18next-http-middleware');
const path = require('path');
const config = require('../utils/config');

// i18next konfiqurasiyasƒ±
i18next
  .use(Backend)
  .use(middleware.LanguageDetector)
  .init({
    // Dil ayarlarƒ±
    lng: config.defaultLanguage, // Default dil
    fallbackLng: config.defaultLanguage, // Fallback dili
    supportedLngs: config.supportedLanguages, // D…ôst…ôkl…ôn…ôn dill…ôr
    
    // Backend konfiqurasiyasƒ± (fayl sistem)
    backend: {
      loadPath: path.join(__dirname, '../../locales/{{lng}}.json'),
      addPath: path.join(__dirname, '../../locales/{{lng}}.missing.json')
    },
    
    // Dil a≈ükarlamaq √º√ß√ºn strategiyalar
    detection: {
      order: ['querystring', 'cookie', 'header', 'path', 'subdomain'],
      lookupQuerystring: 'lng',
      lookupCookie: 'lng',
      lookupPath: 'lng',
      lookupFromPathIndex: 0,
      caches: ['cookie'], // Dili cookie-d…ô saxla
      cookieMaxAge: 1000 * 60 * 60 * 24 * 365 // 1 il
    },
    
    // Namespace v…ô key separator
    defaultNS: 'translation',
    keySeparator: '.', // dot notation √º√ß√ºn
    nsSeparator: ':', // namespace separator
    
    // ƒ∞nterpolasiya ayarlarƒ±
    interpolation: {
      escapeValue: true, // XSS protection √º√ß√ºn escape et
      format: function(value, format, lng) {
        // √ñzelle≈ütirilmi≈ü format funksiyasƒ±
        if (format === 'uppercase') return value.toUpperCase();
        if (format === 'lowercase') return value.toLowerCase();
        return value;
      }
    },
    
    // Development konfiqurasiyasƒ±
    debug: config.isDevelopment(),
    
    // Y√ºkl…ônm…ô davranƒ±≈üƒ±
    load: 'languageOnly', // 'az-AZ' yerin…ô sad…ôc…ô 'az' istifad…ô et
    preload: config.supportedLanguages, // B√ºt√ºn dill…ôri …ôvv…ôlc…ôd…ôn y√ºkl…ôyin
    
    // √áeviri eksiklikl…ôri
    saveMissing: config.isDevelopment(), // Development-d…ô eksik t…ôrc√ºm…ôl…ôri saxla
    missingKeyHandler: function(lng, ns, key, fallbackValue) {
      // Silent missing key handling - log only in debug mode with NODE_DEBUG=i18n
      if (config.isDevelopment() && process.env.NODE_DEBUG?.includes('i18n')) {
        console.warn(`üè∑Ô∏è  Eksik t…ôrc√ºm…ô a√ßarƒ±: [${lng}] ${key}`);
      }
    }
  });

// Express middleware yaradƒ±lmasƒ±
const i18nHandler = middleware.handle(i18next, {
  // Dil d…ôyi≈üdirm…ô route-larƒ± avtomatik yaradƒ±lmasƒ±
  removeLngFromUrl: false
});

// √ñzelle≈ütirilmi≈ü middleware - …ôlav…ô funksionallƒ±q √º√ß√ºn
const customI18nMiddleware = (req, res, next) => {
  // i18next middleware-ƒ±nƒ± √ßalƒ±≈ütƒ±r
  i18nHandler(req, res, () => {
    // Hazƒ±rkƒ± dilin URL-d…ô olub olmadƒ±ƒüƒ±nƒ± yoxla
    const urlParts = req.originalUrl.split('/');
    const firstPart = urlParts[1];
    
    // URL-d…ô dil kodu varsa onu √ßƒ±xar v…ô dili t…ôyin et
    if (config.supportedLanguages.includes(firstPart)) {
      req.language = firstPart;
      req.baseUrl = '/' + firstPart;
      
      // Dili d…ôyi≈ü
      if (req.i18n.language !== firstPart) {
        req.i18n.changeLanguage(firstPart);
      }
    } else {
      req.language = config.defaultLanguage;
      req.baseUrl = '';
    }
    
    // Template helper funksiyalarƒ± …ôlav…ô et
    res.locals.t = req.t.bind(req);
    res.locals.changeLanguageUrl = (newLang) => {
      const currentPath = req.originalUrl;
      const currentLang = req.language;
      
      // M√∂vcud dili yeni dill…ô …ôv…ôz et
      if (config.supportedLanguages.includes(req.originalUrl.split('/')[1])) {
        return currentPath.replace(`/${currentLang}`, `/${newLang}`);
      } else {
        return `/${newLang}${currentPath}`;
      }
    };
    
    next();
  });
};

module.exports = customI18nMiddleware;
